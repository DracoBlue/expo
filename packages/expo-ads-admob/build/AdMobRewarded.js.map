{"version":3,"file":"AdMobRewarded.js","sourceRoot":"","sources":["../src/AdMobRewarded.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AAC7D,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,MAAM,2BAA2B,GAA4B,kBAAkB,CAAC,kCAAkC,CAAC;AAEnH,MAAM,yBAAyB,GAAG,IAAI,YAAY,CAAC,2BAA2B,CAAC,CAAC;AAEhF,MAAM,UAAU,GAAG;IACjB,4BAA4B;IAC5B,sBAAsB;IACtB,4BAA4B;IAC5B,sBAAsB;IACtB,uBAAuB;IACvB,uBAAuB;IACvB,mCAAmC;CACpC,CAAC;AAeF,MAAM,aAAa,GAAyD,EAAE,CAAC;AAE/E,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;IAC7B,aAAa,CAAC,SAAS,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;AACvC,CAAC,CAAC,CAAC;AAEH,MAAM,gBAAgB,GAAG,CAAC,IAAmB,EAAE,OAAiB,EAAE,EAAE;IAClE,IAAI,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QAC7B,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,yBAAyB,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;KACxF;SAAM;QACL,OAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI,kBAAkB,CAAC,CAAC;KACxD;AACH,CAAC,CAAC;AAEF,MAAM,mBAAmB,GAAG,CAAC,IAAmB,EAAE,OAAiB,EAAE,EAAE;IACrE,MAAM,iBAAiB,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC3D,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE;QAC3D,OAAO;KACR;IACD,iBAAiB,CAAC,MAAM,EAAE,CAAC;IAC3B,aAAa,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,GAAG,EAAE,CAC9B,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC;AAE3F,eAAe;IACb,WAAW,EAAE,CAAC,EAAU,EAAiB,EAAE,CAAC,2BAA2B,CAAC,WAAW,CAAC,EAAE,CAAC;IACvF,eAAe,EAAE,CAAC,EAAU,EAAiB,EAAE,CAAC,2BAA2B,CAAC,eAAe,CAAC,EAAE,CAAC;IAC/F,cAAc,EAAE,GAAkB,EAAE,CAAC,2BAA2B,CAAC,SAAS,EAAE;IAC5E,WAAW,EAAE,GAAkB,EAAE,CAAC,2BAA2B,CAAC,MAAM,EAAE;IACtE,cAAc,EAAE,GAAkB,EAAE,CAClC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC9B,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;YACzB,2BAA2B,CAAC,SAAS,EAAE;iBACpC,IAAI,CAAC,OAAO,CAAC;iBACb,KAAK,CAAC,MAAM,CAAC,CAAC;SAClB;aAAM;YACL,MAAM,CAAC,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC,CAAC;SAChF;IACH,CAAC,CAAC;IACJ,eAAe,EAAE,GAAqB,EAAE,CAAC,2BAA2B,CAAC,UAAU,EAAE;IACjF,gBAAgB;IAChB,mBAAmB;IACnB,kBAAkB;CACnB,CAAC","sourcesContent":["import { NativeModulesProxy, EventEmitter } from 'expo-core';\nimport { Platform } from 'react-native';\n\nconst AdMobRewardedVideoAdManager: { [name: string]: any } = NativeModulesProxy.ExpoAdsAdMobRewardedVideoAdManager;\n\nconst adMobRewardedEventEmitter = new EventEmitter(AdMobRewardedVideoAdManager);\n\nconst eventNames = [\n  'rewardedVideoDidRewardUser',\n  'rewardedVideoDidLoad',\n  'rewardedVideoDidFailToLoad',\n  'rewardedVideoDidOpen',\n  'rewardedVideoDidStart',\n  'rewardedVideoDidClose',\n  'rewardedVideoWillLeaveApplication',\n];\n\ntype EventNameType =\n  | 'rewardedVideoDidRewardUser'\n  | 'rewardedVideoDidLoad'\n  | 'rewardedVideoDidFailToLoad'\n  | 'rewardedVideoDidOpen'\n  | 'rewardedVideoDidStart'\n  | 'rewardedVideoDidClose'\n  | 'rewardedVideoWillLeaveApplication';\n\ntype Subscription = {\n  remove: () => void,\n};\n\nconst eventHandlers: { [eventName: string]: Map<Function, Subscription> } = {};\n\neventNames.forEach(eventName => {\n  eventHandlers[eventName] = new Map();\n});\n\nconst addEventListener = (type: EventNameType, handler: Function) => {\n  if (eventNames.includes(type)) {\n    eventHandlers[type].set(handler, adMobRewardedEventEmitter.addListener(type, handler));\n  } else {\n    console.log(`Event with type ${type} does not exist.`);\n  }\n};\n\nconst removeEventListener = (type: EventNameType, handler: Function) => {\n  const eventSubscription = eventHandlers[type].get(handler);\n  if (!eventHandlers[type].has(handler) || !eventSubscription) {\n    return;\n  }\n  eventSubscription.remove();\n  eventHandlers[type].delete(handler);\n};\n\nconst removeAllListeners = () =>\n  eventNames.forEach(eventName => adMobRewardedEventEmitter.removeAllListeners(eventName));\n\nexport default {\n  setAdUnitID: (id: string): Promise<void> => AdMobRewardedVideoAdManager.setAdUnitID(id),\n  setTestDeviceID: (id: string): Promise<void> => AdMobRewardedVideoAdManager.setTestDeviceID(id),\n  requestAdAsync: (): Promise<void> => AdMobRewardedVideoAdManager.requestAd(),\n  showAdAsync: (): Promise<void> => AdMobRewardedVideoAdManager.showAd(),\n  dismissAdAsync: (): Promise<void> =>\n    new Promise((resolve, reject) => {\n      if (Platform.OS === 'ios') {\n        AdMobRewardedVideoAdManager.dismissAd()\n          .then(resolve)\n          .catch(reject);\n      } else {\n        reject(new Error('Dismissing ads programmatically is supported only on iOS.'));\n      }\n    }),\n  getIsReadyAsync: (): Promise<boolean> => AdMobRewardedVideoAdManager.getIsReady(),\n  addEventListener,\n  removeEventListener,\n  removeAllListeners,\n};\n"]}